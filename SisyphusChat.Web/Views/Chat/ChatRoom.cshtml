@using SisyphusChat.Infrastructure.Entities
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ChatPageViewModel

@{
    ViewData["Title"] = "Chats";
}

<head>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@3.3.0/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>

<div id="errorMessage" class="alert alert-danger d-none" role="alert">
    <div class="d-flex justify-content-between align-items-center">
        <span id="errorMessageText"></span>
    </div>
</div>

<div id="chatPageContainer">
    <div id="sidebar">
        <!-- Search bar with button-->
        <div class="search-container flex items-center gap-2">
            <input type="text" id="searchInput" placeholder="Search for users or groups..." class="search-input" />
        </div>
        <a href="@Url.Action("Index", "GroupChat")" id="createGroupChatButton" type="button" class="btn btn-primary w-100">
            <i class="fas fa-comments"></i>
            Create Group Chat
        </a>

        <!-- Combined list for users and group chats -->
        <div id="listContainer" class="scrollable-container">
            <ul id="chatList">
                <!-- Group chats -->
                @foreach (var chat in Model.UserViewModel.AssociatedChats)
                {
                    <li class="user-item flex items-center gap-3" data-type="group">
                        <a href="@Url.Action("OpenGroupChat", "Chat", new { chatId = chat.Id })" class="flex items-center gap-3 w-full">
                            <div class="icon-container">
                                <i class="fas fa-users group-icon"></i>
                            </div>
                            <span class="flex-grow text-blue-600 font-semibold truncate">@chat.Name</span>
                        </a>
                    </li>
                }

                <!-- Users (Private chats) -->
                @foreach (var user in Model.UserViewModel.Users)
                {
                    <li class="user-item flex items-center gap-3" data-type="user">
                        <a href="@Url.Action("CreateOrOpenChat", "Chat", new { recipientUserId = user.Id })" class="flex items-center gap-3 w-full">
                            <div class="icon-container">
                                @if (user.Picture.Length > 0)
                                {
                                    var base64Image = Convert.ToBase64String(@user.Picture);
                                    var imgSrc = $"data:image/jpeg;base64,{base64Image}";
                                    <img class="profile-image" src="@imgSrc" alt="User Avatar" />
                                }
                                else
                                {
                                    <img src="~/images/default_pfp.jpg" alt="Default Profile Picture" class="profile-pic" />
                                }
                            </div>
                            <span class="flex-grow text-blue-600 font-semibold truncate">@user.UserName</span>
                            <span class="status-indicator @(user.IsOnline ? "bg-green-500" : "bg-gray-500")"></span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div id="chatContainer">
        <div id="chatHeader" class="chat-header @(Model.ChatViewModel.Chat.Type == ChatType.Group ? "" : "no-clickable")">
            <div class="header-content flex items-center gap-3 pb-3">
                @if (Model.ChatViewModel.Chat.Type == ChatType.Group)
{
    <div class="icon-container-large flex items-center">
        @if (Model.ChatViewModel.Chat.ChatUsers.Any(u => u.User.Picture != null))
        {
            <div class="group-images-stack">
                @foreach (var chatUser in Model.ChatViewModel.Chat.ChatUsers.Take(4))
                            {
                                <div class="stacked-image">
                                    @if (chatUser.User.Picture.Length > 0)
                                    {
                                        var base64Image = Convert.ToBase64String(@chatUser.User.Picture);
                                        var imgSrc = $"data:image/jpeg;base64,{base64Image}";
                                        <img class="profile-image" src="@imgSrc" alt="User Avatar" />
                                    }
                                    else
                                    {
                                        <img src="~/images/default_pfp.jpg" alt="Default Profile Picture" />
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <i class="fas fa-users group-icon-large"></i>
                    }
                    <div class="username-status flex flex-col ml-2">
                        <span class="username-text">@Model.ChatViewModel.Chat.Name</span>
                        <span id="groupUsers">
                            @{
                                var membersList = string.Join(", ", Model.ChatViewModel.Chat.ChatUsers.Select(m => m.User.UserName));
                                var displayMembersList = membersList.Length > 90 ? membersList[..87] + "..." : membersList;
                            }
                            @displayMembersList
                        </span>
                    </div>
                    <a href="@Url.Action("Index", "ChatSettings" , new { chatId=Model.ChatViewModel.Chat.Id })" type="button" class="btn btn-primary w-10 gcsettings">Settings</a>
                </div>
            }
                else
                {
                        <!-- Private chat -->
                        <!-- ChatRoom.cshtml -->
                        <div class="icon-container-large flex items-center">
                            <i class="fas fa-user user-icon-large"></i>
                            <div class="username-status flex flex-col ml-2">
                                <span class="username-text">
                                    <a href="@Url.Action("Profile", "Friends", new { username = Model.ChatViewModel.Chat.ChatUsers.First(m => m.UserId != Model.UserViewModel.CurrentUser.Id).User.UserName })" class="text-blue-500 hover:underline">
                                        @Model.ChatViewModel.Chat.ChatUsers.First(m => m.UserId != Model.UserViewModel.CurrentUser.Id).User.UserName
                                    </a>
                                </span>
                                <span class="status-text @(Model.ChatViewModel.Chat.ChatUsers.First(m => m.UserId != Model.UserViewModel.CurrentUser.Id).User.IsOnline ? "text-green-500" : "text-gray-500")">
                                    @(Model.ChatViewModel.Chat.ChatUsers.First(m => m.UserId != Model.UserViewModel.CurrentUser.Id).User.IsOnline ? "Online" : "Offline")
                                </span>
                            </div>
                        </div>
                }
            </div>
        </div>

        <!-- Chat messages container -->
        <div class="chat-messages">
            @foreach (var message in Model.ChatViewModel.Chat.Messages)
            {
                <div class="message @(message.Sender.Id == Model.UserViewModel.CurrentUser.Id ? "sent" : "received")" 
                     data-message-id="@message.Id">
                    <div class="message-header">
                      @if (message.Sender.Picture.Length > 0)
                      {
                          var base64Image = Convert.ToBase64String(@message.Sender.Picture);
                          var imgSrc = $"data:image/jpeg;base64,{base64Image}";
                          <img class="message-profile-pic" src="@imgSrc" alt="User Avatar" />
                      }
                      else
                      {
                          <img src="~/images/default_pfp.jpg" alt="Default Profile Picture" class="message-profile-pic" />
                      }
                    <span class="sender-name">@message.Sender.UserName</span>
                    </div>
                    <p class="message-content">@message.Content</p>
                    <span class="time">
                        @if (message.LastUpdated == DateTime.MinValue || message.LastUpdated == message.TimeCreated)
                        {
                            @message.TimeCreated.ToString("dd/MM/yyyy', ' HH:mm")
                        }
                        else
                        {
                            @message.LastUpdated.ToString("dd/MM/yyyy', ' HH:mm")
                            <span class="edited-indicator">(edited)</span>
                        }
                    </span>
                    @if (message.Sender.Id == Model.UserViewModel.CurrentUser.Id)
                    {
                        <div class="message-actions">
                            <button class="edit-message-btn" onclick="startEditMessage(this)">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
        <!-- Add edit message form -->
        <div id="editMessageForm" class="edit-message-form d-none">
            <input type="text" id="editMessageInput" />
            <div class="edit-actions">
                <button onclick="saveEditMessage()">Save</button>
                <button onclick="cancelEditMessage()">Cancel</button>
            </div>
        </div>
        <div class="chat-footer">
            <input type="text" id="messageInput" placeholder="Type a message..." />
            <button id="sendMessageButton">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        const chatId = "@Model.ChatId";
        const currentUser = "@Model.UserViewModel.CurrentUser.UserName";

        // To show new messages when chat is opened
        function scrollToBottom() {
            const chatMessages = document.querySelector(".chat-messages");
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        document.addEventListener("DOMContentLoaded", function () {
            scrollToBottom();
        });

        connection.on("ReceiveMessage", (user, message, chatMembersUserNames, sentAt, messageId, profilePicture) => {
            if (document.baseURI.includes(chatId) && chatMembersUserNames.includes(currentUser)) {
                const messageDiv = document.createElement("div");
                messageDiv.classList.add("message", user === currentUser ? "sent" : "received");
                
                // Use the real message ID from the server
                messageDiv.dataset.messageId = messageId;

                // Create message header div
                const messageHeader = document.createElement("div");
                messageHeader.classList.add("message-header");

                // Create and set up profile picture
                const profileImg = document.createElement("img");
                profileImg.classList.add("message-profile-pic");
                if (profilePicture) {
                    profileImg.src = `data:image/jpeg;base64,${profilePicture}`;
                } else {
                    profileImg.src = "/images/default_pfp.jpg";
                }
                profileImg.alt = user === currentUser ? "Your Avatar" : "User Avatar";

                // Create sender name span
                const senderNameSpan = document.createElement("span");
                senderNameSpan.classList.add("sender-name");
                senderNameSpan.textContent = user;

                const messageContent = document.createElement("p");
                messageContent.classList.add("message-content");
                messageContent.textContent = message;

                // Create timestamp span
                const timestampSpan = document.createElement("span");
                timestampSpan.classList.add("time");
                timestampSpan.textContent = new Date(sentAt).toLocaleString([], { dateStyle: 'short', timeStyle: 'short' });


                // Append elements to message header
                messageHeader.appendChild(profileImg);
                messageHeader.appendChild(senderNameSpan);

                // Append all elements to message div
                messageDiv.appendChild(messageHeader);
                messageDiv.appendChild(messageContent);
                messageDiv.appendChild(timestampSpan);

                // Append to chat messages container and scroll
                document.querySelector(".chat-messages").appendChild(messageDiv);
                document.querySelector(".chat-messages").scrollTop = document.querySelector(".chat-messages").scrollHeight;
                // Add edit button for own messages
                if (user === currentUser) {
                    const messageActions = document.createElement("div");
                    messageActions.classList.add("message-actions");
                    
                    const editButton = document.createElement("button");
                    editButton.classList.add("edit-message-btn");
                    editButton.onclick = function() { startEditMessage(this); };
                    
                    const editIcon = document.createElement("i");
                    editIcon.classList.add("fas", "fa-edit");
                    
                    editButton.appendChild(editIcon);
                    messageActions.appendChild(editButton);
                    messageDiv.appendChild(messageActions);
                }

                // Append all elements
                messageDiv.appendChild(senderNameSpan);
                messageDiv.appendChild(messageContent);
                messageDiv.appendChild(timestampSpan);

                document.querySelector(".chat-messages").appendChild(messageDiv);
                scrollToBottom();
            } else {
                const errorContainer = document.getElementById("errorMessage");
                const errorMessageText = document.getElementById("errorMessageText");
                errorMessageText.textContent = "You are no longer a member of this chat.";
                errorContainer.classList.remove("d-none");
                document.getElementById("messageInput").disabled = true;
                document.getElementById("sendMessageButton").disabled = true;
            }
        });

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
                await connection.invoke("JoinChat", chatId);
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
                setTimeout(() => startConnection(), 5000);
            }
        }

        startConnection();

        connection.on("ReceiveError", (errorMessage) => {
            const errorContainer = document.getElementById("errorMessage");
            const errorMessageText = document.getElementById("errorMessageText");

            errorMessageText.textContent = errorMessage;

            errorContainer.classList.remove("d-none");

            document.getElementById("messageInput").disabled = true;
            document.getElementById("sendMessageButton").disabled = true;
        });

        // Send message when the send button is clicked
        document.getElementById("sendMessageButton").addEventListener("click", () => {
            const message = document.getElementById("messageInput").value;
            const errorContainer = document.getElementById("errorMessage");
            const errorMessageText = document.getElementById("errorMessageText");

            if (message.trim() === "") {
                return;
            }

            if (message.length > 1000) {
                errorMessageText.textContent = "Message cannot exceed 1000 characters.";
                errorContainer.classList.remove("d-none");
                return;
            }

            errorContainer.classList.add("d-none");

            // Check if the connection is in the connected state before sending
            if (connection.state === signalR.HubConnectionState.Connected) {
                connection.invoke("SendMessage", currentUser, message, chatId)
                    .catch(err => console.error("SendMessage Error: ", err));
                document.getElementById("messageInput").value = "";
            } else {
                console.warn("Cannot send message. SignalR connection is not established.");
            }
        });

        // Send message when Enter key is pressed in the input field
        document.getElementById("messageInput").addEventListener("keydown", function (event) {
            if (event.keyCode === 13 && !event.shiftKey) {  // Enter key without Shift
                event.preventDefault(); // Prevent the default behavior of adding a new line

                const message = document.getElementById("messageInput").value;
                const errorContainer = document.getElementById("errorMessage");
                const errorMessageText = document.getElementById("errorMessageText");

                if (message.trim() === "") {
                    return;
                }

                if (message.length > 1000) {
                    errorMessageText.textContent = "Message cannot exceed 1000 characters.";
                    errorContainer.classList.remove("d-none");
                    return;
                }

                errorContainer.classList.add("d-none");

                // Check if the connection is in the connected state before sending
                if (connection.state === signalR.HubConnectionState.Connected) {
                    connection.invoke("SendMessage", currentUser, message, chatId)
                        .catch(err => console.error("SendMessage Error: ", err));
                    document.getElementById("messageInput").value = ""; // Clear the input field
                } else {
                    console.warn("Cannot send message. SignalR connection is not established.");
                }
            }
        });

        // Filter chat list by search input
        document.getElementById("searchInput").addEventListener("input", function () {
            const searchTerm = this.value.toLowerCase();
            const items = document.querySelectorAll("#chatList .user-item");

            items.forEach(item => {
                const text = item.textContent.toLowerCase();
                if (text.includes(searchTerm)) {
                    item.style.display = "";
                } else {
                    item.style.display = "none";
                }
            });
        });

        // Add these functions after your existing SignalR setup
        let currentEditMessageId = null;
        let originalMessage = null;

        function startEditMessage(button) {
            const messageDiv = button.closest('.message');
            const messageContent = messageDiv.querySelector('.message-content');
            currentEditMessageId = messageDiv.dataset.messageId;
            originalMessage = messageContent.textContent;

            const editForm = document.getElementById('editMessageForm');
            const editInput = document.getElementById('editMessageInput');
            
            editInput.value = originalMessage;
            editForm.classList.remove('d-none');
            messageContent.parentNode.insertBefore(editForm, messageContent.nextSibling);
            messageContent.style.display = 'none';
            editInput.focus();
        }

        function saveEditMessage() {
            const editInput = document.getElementById('editMessageInput');
            const newContent = editInput.value.trim();
            
            if (newContent === '' || newContent === originalMessage) {
                cancelEditMessage();
                return;
            }

            try {
                connection.invoke("EditMessage", currentEditMessageId, newContent, chatId);
            } catch (err) {
                console.error("Error editing message:", err);
                const errorContainer = document.getElementById("errorMessage");
                errorContainer.textContent = "Failed to edit message";
                errorContainer.classList.remove("d-none");
            }

            cancelEditMessage();
        }

        function cancelEditMessage() {
            const editForm = document.getElementById('editMessageForm');
            const messageDiv = document.querySelector(`[data-message-id="${currentEditMessageId}"]`);
            const messageContent = messageDiv.querySelector('.message-content');
            
            editForm.classList.add('d-none');
            messageContent.style.display = 'block';
            currentEditMessageId = null;
            originalMessage = null;
        }

        // Add MessageEdited handler
        connection.on("MessageEdited", (messageId, newContent, lastUpdated) => {
            const messageDiv = document.querySelector(`[data-message-id="${messageId}"]`);
            if (messageDiv) {
                const messageContent = messageDiv.querySelector('.message-content');
                const timeSpan = messageDiv.querySelector('.time');
                
                messageContent.textContent = newContent;
                timeSpan.innerHTML = `${new Date(lastUpdated).toLocaleString()} <span class="edited-indicator">(edited)</span>`;
            }
        });
    </script>
}


<style scoped>
    html, body {
        margin: 0;
        padding: 0;
    }

    .container {
        margin: 0;
        padding: 0;
        width: 100%;
    }

    .icon-container-large {
        display: flex;
        align-items: center; /* Aligns items vertically in the center */
    }

    main[b-fefn0adsrq] {
        margin: 0;
    }

    .sender-name {
        font-weight: bold;
    }

    .gcsettings {
        margin-left: auto;
        margin-right: 1%;
    }

.message-actions {
    position: absolute;
    top: 5px;
    left: 5px;
    display: none;
}

.message:hover .message-actions {
    display: block;
}

.edit-message-btn {
    background: none;
    border: none;
    padding: 2px 5px;
    cursor: pointer;
    color: #ffffff;
}

.edit-message-btn:hover {
    color: #e0e0e0;
}

.edit-message-form {
    margin: 5px 0;
    padding: 10px;
    background: #ffffff;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.edit-message-form input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    margin-bottom: 5px;
}

.edit-actions {
    display: flex;
    gap: 10px;
}

.edit-actions button {
    padding: 5px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.edit-actions button:first-child {
    background-color: #007bff;
    color: white;
}

.edit-actions button:last-child {
    background-color: #dc3545;
    color: white;
}

.edited-indicator {
    font-size: 0.8em;
    color: #666;
    margin-left: 5px;
}
</style>