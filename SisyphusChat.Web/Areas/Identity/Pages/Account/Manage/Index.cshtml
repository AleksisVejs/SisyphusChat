@page
@using Microsoft.AspNetCore.Identity
@using SisyphusChat.Infrastructure.Entities
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@model IndexModel
@{
    ViewData["Title"] = "Profile";
    ViewData["ActivePage"] = ManageNavPages.Index;
}

<h3>@ViewData["Title"]</h3>
<partial name="_StatusMessage" for="StatusMessage" />
<div class="row">
    <div class="col-md-6">
        <form id="profile-form" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
            <div class="form-floating mb-3">
                <input asp-for="Username" class="form-control" placeholder="Please choose your username." disabled />
                <label asp-for="Username" class="form-label"></label>
            </div>
            <div class="form-floating mb-3">
                <input asp-for="Input.NewUsername" class="form-control" placeholder="Please enter new username." />
                <label asp-for="Input.NewUsername" class="form-label"></label>
            </div>
            <div class="form-floating mb-3">
                <button type="button" id="uploadBtn" style="border: none; background: transparent; padding: 0;">
                    @if (Model?.Input?.Picture != null && Model.Input.Picture.Length > 0)
                    {
                        var base64Image = Convert.ToBase64String(Model.Input.Picture);
                        var imgSrc = $"data:image/jpeg;base64,{base64Image}";
                        <img id="profileImage" src="@imgSrc" alt="User Avatar" style="width: 150px; height: 150px;" />
                    }
                    else
                    {
                        <img id="profileImage" src="~/images/default_pfp.jpg" alt="Default Avatar" style="width: 150px; height: 150px;" />
                    }
                </button>
            </div>
            <input asp-for="Input.ProfilePicture" type="file" id="fileInput" style="display: none;" accept="image/*" />
            <button id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </form>
    </div>
    <div class="col-md-6">
        <!-- Other content -->
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const uploadBtn = document.getElementById('uploadBtn');
            const fileInput = document.getElementById('fileInput');
            const profileImage = document.getElementById('profileImage');
            const maxSizeMB = 2;
            const maxSizeBytes = maxSizeMB * 1024 * 1024;
            const targetWidth = 150;  // Target width for resizing
            const targetHeight = 150; // Target height for resizing

            // Store the current image source
            const originalImageSrc = profileImage.src;

            if (uploadBtn && fileInput && profileImage) {
                uploadBtn.addEventListener('click', function () {
                    fileInput.click();
                });

                fileInput.addEventListener('change', function (event) {
                    const file = event.target.files[0];
                    if (file) {
                        if (file.size > maxSizeBytes) {
                            alert(`File size exceeds ${maxSizeMB} MB. Please choose a smaller file.`);
                            fileInput.value = ''; // Reset file input
                            profileImage.src = originalImageSrc; // Reset the image preview to original
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = function (e) {
                            const img = new Image();
                            img.src = e.target.result;
                            img.onload = function () {
                                const canvas = document.createElement('canvas');
                                const ctx = canvas.getContext('2d');

                                // Set canvas size to target width/height
                                canvas.width = targetWidth;
                                canvas.height = targetHeight;

                                // Draw the image in the canvas to fit within the box size
                                ctx.drawImage(img, 0, 0, targetWidth, targetHeight);

                                // Get the resized image data from the canvas
                                const resizedImage = canvas.toDataURL('image/jpeg');

                                // Display the resized image in the profileImage element
                                profileImage.src = resizedImage;
                            };
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }
        });
    </script>
}

