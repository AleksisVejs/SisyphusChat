@model ChatSettingsViewModel

<body>
    <form asp-action="UpdateGroupChat" method="post" class="form-container">
        <input id="chat-id-val" type="hidden" asp-for="ChatId" />

        <h2 class="text-2xl font-bold mb-4 centered-heading">Group Chat Settings</h2>

        <div class="form-group mb-4">
            <label asp-for="ChatName" class="control-label">Current Chat Group Name:</label>
            <input asp-for="ChatName" class="form-control" readonly />
        </div>

        @if (Model.CurrentUser == Model.ChatOwner)
        {
            <div class="form-group mb-4">
                <label asp-for="NewChatName" class="control-label">New Chat Group Name:</label>
                <input asp-for="NewChatName" class="form-control" />
                <span asp-validation-for="NewChatName" class="text-danger text-red-500"></span>
            </div>
        }

         <hr/>

        <div class="form-group mb-4">
            <h3 class="text-xl font-bold mb-2 purple-title">Chat owner</h3>
            <div class="chat-owner-name">
                <i class="fas fa-crown owner-icon"></i>
                <span>@Model.ChatOwner</span>
                <span class="user-status @(Model.CurrentUser == Model.ChatOwner ? "online" : "offline")">
                    @(Model.CurrentUser == Model.ChatOwner ? "Online" : "Offline")
                </span>
            </div>

             <hr/>

            <h2 class="text-xl font-bold mb-2 purple-title">Users in group chat</h2>
            <input type="text" id="searchInChatUsers" placeholder="Search users in chat..." class="search-input mb-2" />
            <ul id="chatUsersList" class="user-list">
    @foreach (var user in Model.ChatUsers)
    {
        <li class="user-item">
            <div class="user-info-container">
                <div class="user-avatar">
                    @if (user.Picture.Length > 0)
                    {
                        var base64Image = Convert.ToBase64String(@user.Picture);
                        var imgSrc = $"data:image/jpeg;base64,{base64Image}";
                        <img class="user-profile-pic" src="@imgSrc" alt="User Avatar" />
                    }
                    else
                    {
                        <img src="~/images/default_pfp.jpg" alt="Default Profile Picture" class="user-profile-pic" />
                    }
                </div>
                <div class="user-details">
                    <span class="user-name">@user.UserName</span>
                    <span class="user-status @(user.IsOnline ? "online" : "offline")">@(user.IsOnline ? "Online" : "Offline")</span>
                </div>
            </div>
            @if (Model.CurrentUser == Model.ChatOwner)
            {
                <button type="button" class="btn ml-2 delete-button" onclick="confirmDeleteUser('@user.Id', '@Model.ChatId')">
                    Delete
                </button>
            }
        </li>
    }
</ul>
        </div>

         <hr/>

        @if (Model.CurrentUser == Model.ChatOwner)
        {
            <div class="form-group mb-4">
                <h2 class="text-xl font-bold mb-2 purple-title">Select users to add</h2>
                <input type="text" id="searchInput" placeholder="Search users to add..." class="search-input mb-2" />

                <ul id="notInChatUsersList" class="user-list">
                    @foreach (var user in Model.NotChatUsers)
                    {
                        <li class="user-item" onclick="toggleCheckbox(this)">
                            <input type="checkbox" class="user-checkbox" value="@user.UserName" />
                            <span>@user.UserName</span>
                            <span class="user-status @(user.IsOnline ? "online" : "offline")"></span>
                        </li>
                    }
                </ul>
            </div>

            <div style="display: none;">
                <input type="hidden" id="selectedUsers" name="SelectedUsers" />
            </div>
        }

        <div class="button-container">
            <button type="button" class="btn btn-secondary" onclick="returnBack()">Return</button>
            @if (Model.CurrentUser == Model.ChatOwner)
            {
                <button type="submit" class="btn btn-primary">Update Group Chat</button>
            }
        </div>
    </form>

    <script type="text/javascript">
        function updateSelectedUsers() {
            const selectedUsers = Array.from(document.querySelectorAll('#notInChatUsersList .user-checkbox:checked'))
                .map(checkbox => checkbox.value);

            const container = document.getElementById('selectedUsers');
            container.value = JSON.stringify(selectedUsers);
        }

        function toggleCheckbox(item) {
            const checkbox = item.querySelector('.user-checkbox');
            checkbox.checked = !checkbox.checked;
            updateSelectedUsers();
        }

        function filterUsers(listId, searchInputId) {
            const searchTerm = document.getElementById(searchInputId).value.toLowerCase();
            const items = document.querySelectorAll(`#${listId} .user-item`);

            items.forEach(item => {
                const text = item.textContent.toLowerCase();
                item.style.display = text.includes(searchTerm) ? "" : "none";
            });
        }

        document.getElementById('searchInput').addEventListener('input', function () {
            filterUsers('notInChatUsersList', 'searchInput');
        });

        document.getElementById('searchInChatUsers').addEventListener('input', function () {
            filterUsers('chatUsersList', 'searchInChatUsers');
        });

        function returnBack() {
            const chatId = document.getElementById("chat-id-val").value;
            window.location.href = '@Url.Action("OpenGroupChat", "Chat")' + '?chatId=' + encodeURIComponent(chatId);
        }

        document.querySelector('form').addEventListener('submit', function () {
            updateSelectedUsers();
        });
    </script>
</body>

<style scoped>
    body {
        min-height: 100vh;
        margin: 0;
        padding: 0;
        overflow-y: auto !important;
    }

    .form-container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background: rgba(var(--bg-color-rgb), 0.5);
        backdrop-filter: blur(10px);
        border-radius: 24px;
        border: 1px solid rgba(var(--text-color-rgb), 0.1);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        height: auto;
    }

    .user-list {
        max-height: 250px;
        overflow-y: auto;
        border-radius: 16px;
        background: rgba(var(--bg-color-rgb), 0.2);
        padding: 0.75rem;
        margin: 0.5rem 0;
    }

    /* Custom scrollbar for user lists */
    .user-list::-webkit-scrollbar {
        width: 8px;
    }

    .user-list::-webkit-scrollbar-track {
        background: rgba(var(--bg-color-rgb), 0.1);
        border-radius: 10px;
    }

    .user-list::-webkit-scrollbar-thumb {
        background: rgba(var(--accent-color-rgb), 0.3);
        border-radius: 10px;
    }

    .user-list::-webkit-scrollbar-thumb:hover {
        background: rgba(var(--accent-color-rgb), 0.5);
    }

    hr {
        margin: 1.5rem 0;
        border: none;
        border-top: 1px solid rgba(var(--text-color-rgb), 0.1);
    }

    .button-container {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        body {
            height: auto;
            min-height: 100vh;
        }

        .form-container {
            margin: 1rem;
            padding: 1.5rem;
            min-height: auto;
        }

        .centered-heading {
            font-size: 2rem;
        }

        .button-container {
            flex-direction: column;
        }

        .button-container button {
            width: 100%;
        }
    }

    .centered-heading {
        text-align: center;
        margin-bottom: 2.5rem;
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, var(--accent-color) 0%, var(--accent-color-dark) 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        letter-spacing: -0.5px;
    }

    .form-group {
        margin-bottom: 1.5rem;
        position: relative;
    }

    .control-label {
        display: block;
        margin-bottom: 0.75rem;
        font-weight: 600;
        color: var(--text-color);
        font-size: 1.1rem;
    }

    .form-control {
        width: 100%;
        padding: 1rem 1.25rem;
        border-radius: 16px;
        border: 1px solid rgba(var(--text-color-rgb), 0.1);
        background: rgba(var(--bg-color-rgb), 0.2);
        color: var(--text-color);
        transition: all 0.3s ease;
        font-size: 1rem;
        backdrop-filter: blur(5px);
    }

    .form-control:focus {
        border-color: var(--accent-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(var(--accent-color-rgb), 0.2);
        background: rgba(var(--bg-color-rgb), 0.3);
    }

    .form-control[readonly] {
        background: rgba(var(--bg-color-rgb), 0.1);
        cursor: not-allowed;
    }

    .search-input {
        width: 100%;
        padding: 1rem 1.25rem 1rem 3rem;
        border-radius: 16px;
        border: 1px solid rgba(var(--text-color-rgb), 0.1);
        background: rgba(var(--bg-color-rgb), 0.2);
        color: var(--text-color);
        transition: all 0.3s ease;
        font-size: 1rem;
        backdrop-filter: blur(5px);
    }

    .search-input:focus {
        border-color: var(--accent-color);
        outline: none;
        box-shadow: 0 0 0 3px rgba(var(--accent-color-rgb), 0.2);
        background: rgba(var(--bg-color-rgb), 0.3);
    }

    .user-list {
        max-height: 400px;
        overflow-y: auto;
        border-radius: 16px;
        background: rgba(var(--bg-color-rgb), 0.2);
        padding: 0.75rem;
        backdrop-filter: blur(5px);
    }

    .user-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        border-radius: 12px;
        margin-bottom: 0.75rem;
        background: rgba(var(--bg-color-rgb), 0.3);
        border: 1px solid rgba(var(--text-color-rgb), 0.05);
        transition: all 0.3s ease;
        backdrop-filter: blur(5px);
    }

    .user-item:hover {
        background: rgba(var(--bg-color-rgb), 0.4);
        transform: translateX(5px) scale(1.02);
    }

    .user-info-container {
        display: flex;
        align-items: center;
        gap: 1.25rem;
        flex: 1;
        min-width: 0;
    }

    .user-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        border: 2px solid var(--accent-color);
        overflow: hidden;
        box-shadow: 0 0 15px rgba(var(--accent-color-rgb), 0.2);
    }

    .user-profile-pic {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .user-details {
        display: flex;
        flex-direction: column;
        gap: 0.35rem;
        flex: 1;
    }

    .user-name {
        font-weight: 600;
        color: var(--text-color);
        font-size: 1.1rem;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .user-status {
        font-size: 0.9rem;
        padding: 0.35rem 0.75rem;
        border-radius: 20px;
        display: inline-block;
        font-weight: 500;
        text-align: center;
        flex-shrink: 0;
        max-width: 100px;
    }

    .user-status.online {
        background: linear-gradient(135deg, #43b581 0%, #2f9164 100%);
        color: white;
    }

    .user-status.offline {
        background: linear-gradient(135deg, #747f8d 0%, #5c646f 100%);
        color: white;
    }

    .button-container {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2.5rem;
    }

    .btn {
        padding: 0.9rem 1.75rem;
        border-radius: 16px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
        font-size: 1rem;
        letter-spacing: 0.3px;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--accent-color) 0%, var(--accent-color-dark) 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(var(--accent-color-rgb), 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(var(--accent-color-rgb), 0.4);
    }

    .btn-secondary {
        background: rgba(var(--text-color-rgb), 0.1);
        color: var(--text-color);
        backdrop-filter: blur(5px);
    }

    .btn-secondary:hover {
        background: rgba(var(--text-color-rgb), 0.15);
        transform: translateY(-3px);
    }

    .delete-button {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
        padding: 0.6rem 1.2rem;
        border-radius: 12px;
        transition: all 0.3s ease;
        font-weight: 500;
        box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
    }

    .delete-button:hover {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);
    }

    .purple-title {
        color: var(--accent-color);
        margin: 2rem 0 1.25rem 0;
        font-size: 1.5rem;
        font-weight: 700;
        letter-spacing: -0.5px;
    }

    hr {
        border: none;
        border-top: 1px solid rgba(var(--text-color-rgb), 0.1);
        margin: 2rem 0;
    }

    /* Custom scrollbar */
    .user-list::-webkit-scrollbar {
        width: 8px;
    }

    .user-list::-webkit-scrollbar-track {
        background: rgba(var(--bg-color-rgb), 0.1);
        border-radius: 10px;
    }

    .user-list::-webkit-scrollbar-thumb {
        background: rgba(var(--accent-color-rgb), 0.3);
        border-radius: 10px;
    }

    .user-list::-webkit-scrollbar-thumb:hover {
        background: rgba(var(--accent-color-rgb), 0.5);
    }

    .chat-owner-name {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 1.5rem;
        background: rgba(var(--bg-color-rgb), 0.3);
        border: 1px solid rgba(var(--text-color-rgb), 0.1);
        border-radius: 16px;
        backdrop-filter: blur(5px);
        margin: 1rem 0;
    }

    .chat-owner-name span:first-child {
        font-weight: 600;
        font-size: 1.1rem;
        color: var(--accent-color);
        flex: 1;
    }

    .chat-owner-name .user-status {
        font-size: 0.9rem;
        padding: 0.35rem 0.75rem;
        border-radius: 20px;
        font-weight: 500;
        min-width: 80px;
        text-align: center;
    }

    .chat-owner-name .user-status.online {
        background: linear-gradient(135deg, #43b581 0%, #2f9164 100%);
        color: white;
        box-shadow: 0 2px 8px rgba(67, 181, 129, 0.3);
    }

    .chat-owner-name .user-status.offline {
        background: linear-gradient(135deg, #747f8d 0%, #5c646f 100%);
        color: white;
        box-shadow: 0 2px 8px rgba(116, 127, 141, 0.3);
    }

    .owner-icon {
        color: var(--accent-color);
        font-size: 1.2rem;
        margin-right: 0.5rem;
        filter: drop-shadow(0 2px 4px rgba(var(--accent-color-rgb), 0.3));
    }

    .chat-owner-name:hover {
        transform: translateX(5px);
        background: rgba(var(--bg-color-rgb), 0.4);
        transition: all 0.3s ease;
    }
</style>